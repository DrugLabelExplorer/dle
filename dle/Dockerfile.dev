FROM python:3.10.10-slim-buster as python-build

WORKDIR /app

ENV PYTHONDONTWRITEBYTECODE=1
ENV PYTHONUNBUFFERED=1

RUN apt-get update --fix-missing
# g++ for Pillow; unixodbc-dev for pyodbc
# RUN apt-get install -y nginx python-psycopg2 postgresql graphviz gettext gdal-bin python-gdal python3-numpy gnupg gpg libpq-dev gcc g++ unixodbc-dev
RUN apt-get install -y nginx python-psycopg2 postgresql libpq-dev gcc g++


# Nginx tweaked
# RUN addgroup --system nginx
# RUN adduser --system nginx
# RUN usermod -a -G nginx nginx
# RUN mkdir -p /run/nginx

# RUN mkdir -p /var/log/nginx && \
#     ln -sf /dev/stdout /var/log/nginx/access.log && \
#     ln -sf /dev/stdout /var/log/nginx/error.log

# Use dev NGINX config
# COPY nginx/nginx.dev.conf /etc/nginx/nginx.conf

# Python requirements
COPY requirements.txt /app
RUN pip install -r requirements.txt

# Setup app
# COPY . /app
COPY entrypoint /app

# RUN sed -i 's/\r$//g' /app/postgres_ready.py
# RUN chmod +x /app/postgres_ready.py
# RUN sed -i 's/\r$//g' /app/entrypoint
# RUN chmod +x /app/entrypoint

# RUN mkdir /app/setup
# WORKDIR /app/setup
# COPY postgres_ready.py /app/setup
# RUN sed -i 's/\r$//g' postgres_ready.py
# RUN chmod +x postgres_ready.py
# COPY entrypoint /app/setup
# RUN sed -i 's/\r$//g' entrypoint
# RUN chmod +x entrypoint

EXPOSE 8000 5000

# WORKDIR /app
CMD /app/entrypoint