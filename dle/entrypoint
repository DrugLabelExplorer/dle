#!/bin/bash

set -o errexit
set -o pipefail

until python3 /app/postgres_ready.py; do
  >&2 echo "Waiting for PostgreSQL to become available..."
  sleep 1
done
>&2 echo "PostgreSQL is available"

if [[ ($MIGRATE) && ("$MIGRATE" = "True") ]]; then
  python3 manage.py makemigrations --no-input
  python3 manage.py migrate --no-input --fake-initial
  echo "Migrations finished"
  python3 manage.py collectstatic --noinput
  echo "Static files collected"
fi


if [[ ($INIT_SUPERUSER) && ("$INIT_SUPERUSER" = "True") ]]; then
  # Uses the DJANGO_SUPERUSER_* environment variables to create a superuser
  # TODO find a way to only run createsuperuser if it doesn't already exist
  echo "Creating superuser"
  python3 manage.py createsuperuser --noinput
fi

if [[ ($LOAD) && ("$LOAD" = "True") ]]; then
  echo "Beginning the data ingest"
  echo "Loading EMA (EU) data"
  python3 manage.py load_ema_data --type full
  echo "Finished loading EMA (EU) data"
  echo "Loading FDA (US) data"
  python3 manage.py load_fda_data --type full
  echo "Finished loading FDA (US) data"
  echo "Loading TGA (Australia) data"
  python3 manage.py load_tga_data --type full
  echo "Finished loading TGA (Australia) data"
  echo "Updating latest drug labels"
  python3 manage.py update_latest_drug_labels
  echo "Finished updating latest drug labels"
  echo "Ended the data ingest"
fi

# In production, use Gunicorn + Nginx
# TODO maybe reverse this so if nothing is passed the default is Nginx?
if [[ ($USE_NGINX) && ("$USE_NGINX" = "True" ) ]]; then
  echo "Nginx proxying requests from :8000 (Django app accessible from http://localhost:8000/)"
  nginx
  echo "Using Gunicorn on :5000 as app server / wsgi host"
  gunicorn --bind :5000 --workers 3 --threads 16 --timeout 0 dle.wsgi:application
else
  # When in dev use the Django runserver for hot reload
  python3 manage.py runserver 0.0.0.0:8000
fi
